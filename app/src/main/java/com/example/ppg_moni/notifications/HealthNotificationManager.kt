package com.example.ppg_moni.notifications

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.core.content.ContextCompat
import com.example.ppg_moni.MainActivity
import com.example.ppg_moni.R
import com.example.ppg_moni.data.models.BPCategory
import com.example.ppg_moni.data.models.BloodPressurePrediction
import com.example.ppg_moni.data.models.RiskLevel

class HealthNotificationManager(private val context: Context) {
    
    companion object {
        private const val CHANNEL_ID_HEALTH_ALERTS = "health_alerts"
        private const val CHANNEL_ID_REMINDERS = "reminders"
        private const val CHANNEL_ID_EMERGENCY = "emergency"
        
        private const val NOTIFICATION_ID_BP_ALERT = 1001
        private const val NOTIFICATION_ID_EMERGENCY = 1002
        private const val NOTIFICATION_ID_REMINDER = 1003
        private const val NOTIFICATION_ID_TREND_ALERT = 1004
    }
    
    init {
        createNotificationChannels()
    }
    
    private fun createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            
            // Health Alerts Channel
            val healthChannel = NotificationChannel(
                CHANNEL_ID_HEALTH_ALERTS,
                "C·∫£nh b√°o s·ª©c kh·ªèe",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "Th√¥ng b√°o v·ªÅ k·∫øt qu·∫£ d·ª± ƒëo√°n huy·∫øt √°p b·∫•t th∆∞·ªùng"
                enableVibration(true)
                setShowBadge(true)
            }
            
            // Reminders Channel
            val reminderChannel = NotificationChannel(
                CHANNEL_ID_REMINDERS,
                "Nh·∫Øc nh·ªü",
                NotificationManager.IMPORTANCE_DEFAULT
            ).apply {
                description = "Nh·∫Øc nh·ªü ƒëo huy·∫øt √°p v√† ki·ªÉm tra s·ª©c kh·ªèe"
                enableVibration(false)
                setShowBadge(true)
            }
            
            // Emergency Channel
            val emergencyChannel = NotificationChannel(
                CHANNEL_ID_EMERGENCY,
                "Kh·∫©n c·∫•p",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "C·∫£nh b√°o kh·∫©n c·∫•p v·ªÅ t√¨nh tr·∫°ng s·ª©c kh·ªèe nguy hi·ªÉm"
                enableVibration(true)
                enableLights(true)
                lightColor = ContextCompat.getColor(context, R.color.error_color)
                setShowBadge(true)
            }
            
            notificationManager.createNotificationChannels(listOf(
                healthChannel, reminderChannel, emergencyChannel
            ))
        }
    }
    
    /**
     * G·ª≠i th√¥ng b√°o cho k·∫øt qu·∫£ d·ª± ƒëo√°n huy·∫øt √°p m·ªõi
     */
    fun notifyBloodPressureResult(prediction: BloodPressurePrediction) {
        if (!hasNotificationPermission()) return
        
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("prediction_id", prediction.id)
        }
        
        val pendingIntent = PendingIntent.getActivity(
            context, 0, intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val (channelId, title, message, priority) = when (prediction.category) {
            BPCategory.HYPERTENSIVE_CRISIS -> {
                Tuple4(
                    CHANNEL_ID_EMERGENCY,
                    "üö® KH·∫®N C·∫§P: Huy·∫øt √°p nguy hi·ªÉm!",
                    "Huy·∫øt √°p ${prediction.bloodPressureText} mmHg. C·∫ßn chƒÉm s√≥c y t·∫ø ngay l·∫≠p t·ª©c!",
                    NotificationCompat.PRIORITY_MAX
                )
            }
            BPCategory.STAGE_2_HYPERTENSION -> {
                Tuple4(
                    CHANNEL_ID_HEALTH_ALERTS,
                    "‚ö†Ô∏è Huy·∫øt √°p cao ƒë·ªô 2",
                    "Huy·∫øt √°p ${prediction.bloodPressureText} mmHg. N√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ©.",
                    NotificationCompat.PRIORITY_HIGH
                )
            }
            BPCategory.STAGE_1_HYPERTENSION -> {
                Tuple4(
                    CHANNEL_ID_HEALTH_ALERTS,
                    "‚ö†Ô∏è Huy·∫øt √°p cao ƒë·ªô 1", 
                    "Huy·∫øt √°p ${prediction.bloodPressureText} mmHg. Theo d√µi v√† c·∫£i thi·ªán l·ªëi s·ªëng.",
                    NotificationCompat.PRIORITY_DEFAULT
                )
            }
            BPCategory.ELEVATED -> {
                Tuple4(
                    CHANNEL_ID_HEALTH_ALERTS,
                    "üìà Huy·∫øt √°p cao h∆°n b√¨nh th∆∞·ªùng",
                    "Huy·∫øt √°p ${prediction.bloodPressureText} mmHg. C·∫ßn ch√∫ √Ω theo d√µi.",
                    NotificationCompat.PRIORITY_DEFAULT
                )
            }
            BPCategory.NORMAL -> {
                Tuple4(
                    CHANNEL_ID_HEALTH_ALERTS,
                    "‚úÖ Huy·∫øt √°p b√¨nh th∆∞·ªùng",
                    "Huy·∫øt √°p ${prediction.bloodPressureText} mmHg. Ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh!",
                    NotificationCompat.PRIORITY_LOW
                )
            }
        }
        
        val color = when (prediction.category) {
            BPCategory.NORMAL -> ContextCompat.getColor(context, R.color.bp_normal_color)
            BPCategory.ELEVATED -> ContextCompat.getColor(context, R.color.bp_elevated_color)
            BPCategory.STAGE_1_HYPERTENSION -> ContextCompat.getColor(context, R.color.bp_stage1_color)
            BPCategory.STAGE_2_HYPERTENSION -> ContextCompat.getColor(context, R.color.bp_stage2_color)
            BPCategory.HYPERTENSIVE_CRISIS -> ContextCompat.getColor(context, R.color.bp_crisis_color)
        }
        
        val notification = NotificationCompat.Builder(context, channelId)
            .setSmallIcon(R.drawable.ic_pulse)
            .setContentTitle(title)
            .setContentText(message)
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText("$message\n\nƒê·ªô tin c·∫≠y: ${(prediction.confidence * 100).toInt()}%\nM·ª©c ƒë·ªô nguy c∆°: ${prediction.riskLevel.displayName}")
            )
            .setPriority(priority)
            .setColor(color)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setCategory(NotificationCompat.CATEGORY_STATUS)
            .build()
        
        NotificationManagerCompat.from(context).notify(NOTIFICATION_ID_BP_ALERT, notification)
        
        // G·ª≠i emergency notification ri√™ng n·∫øu c·∫ßn
        if (prediction.needsImmediateAttention) {
            sendEmergencyNotification(prediction)
        }
    }
    
    /**
     * G·ª≠i th√¥ng b√°o kh·∫©n c·∫•p
     */
    private fun sendEmergencyNotification(prediction: BloodPressurePrediction) {
        if (!hasNotificationPermission()) return
        
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("show_emergency", true)
            putExtra("prediction_id", prediction.id)
        }
        
        val pendingIntent = PendingIntent.getActivity(
            context, 0, intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        // Action buttons for emergency
        val callDoctorIntent = Intent(Intent.ACTION_DIAL).apply {
            data = android.net.Uri.parse("tel:115") // Emergency number in Vietnam
        }
        val callDoctorPendingIntent = PendingIntent.getActivity(
            context, 1, callDoctorIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID_EMERGENCY)
            .setSmallIcon(R.drawable.ic_warning)
            .setContentTitle("üö® KH·∫®N C·∫§P: C·∫ßn chƒÉm s√≥c y t·∫ø!")
            .setContentText("Huy·∫øt √°p ${prediction.bloodPressureText} mmHg ·ªü m·ª©c nguy hi·ªÉm")
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText("Huy·∫øt √°p c·ªßa b·∫°n ƒëang ·ªü m·ª©c nguy hi·ªÉm: ${prediction.bloodPressureText} mmHg\n\n" +
                        "C·∫ßn t√¨m ki·∫øm s·ª± chƒÉm s√≥c y t·∫ø kh·∫©n c·∫•p ngay l·∫≠p t·ª©c!\n\n" +
                        "Tri·ªáu ch·ª©ng c·∫ßn ch√∫ √Ω: ƒëau ƒë·∫ßu d·ªØ d·ªôi, kh√≥ th·ªü, ƒëau ng·ª±c, thay ƒë·ªïi th·ªã l·ª±c.")
            )
            .setPriority(NotificationCompat.PRIORITY_MAX)
            .setColor(ContextCompat.getColor(context, R.color.error_color))
            .setContentIntent(pendingIntent)
            .addAction(R.drawable.ic_warning, "G·ªçi 115", callDoctorPendingIntent)
            .addAction(R.drawable.ic_pulse, "Xem chi ti·∫øt", pendingIntent)
            .setAutoCancel(false) // Don't auto-cancel emergency notifications
            .setOngoing(true) // Make it persistent
            .setCategory(NotificationCompat.CATEGORY_ALARM)
            .build()
        
        NotificationManagerCompat.from(context).notify(NOTIFICATION_ID_EMERGENCY, notification)
    }
    
    /**
     * G·ª≠i nh·∫Øc nh·ªü ƒëo huy·∫øt √°p
     */
    fun sendMeasurementReminder() {
        if (!hasNotificationPermission()) return
        
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("open_measurement", true)
        }
        
        val pendingIntent = PendingIntent.getActivity(
            context, 0, intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID_REMINDERS)
            .setSmallIcon(R.drawable.ic_pulse)
            .setContentTitle("‚è∞ Nh·∫Øc nh·ªü ƒëo huy·∫øt √°p")
            .setContentText("ƒê√£ ƒë·∫øn gi·ªù ƒëo huy·∫øt √°p h√†ng ng√†y c·ªßa b·∫°n")
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText("Vi·ªác theo d√µi huy·∫øt √°p th∆∞·ªùng xuy√™n gi√∫p b·∫°n:\n" +
                        "‚Ä¢ Ph√°t hi·ªán s·ªõm v·∫•n ƒë·ªÅ s·ª©c kh·ªèe\n" +
                        "‚Ä¢ Qu·∫£n l√Ω t√¨nh tr·∫°ng hi·ªán t·∫°i t·ªët h∆°n\n" +
                        "‚Ä¢ Cung c·∫•p d·ªØ li·ªáu cho b√°c sƒ©\n\n" +
                        "Ch·∫°m ƒë·ªÉ ƒëo ngay!")
            )
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setColor(ContextCompat.getColor(context, R.color.primary_color))
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setCategory(NotificationCompat.CATEGORY_REMINDER)
            .build()
        
        NotificationManagerCompat.from(context).notify(NOTIFICATION_ID_REMINDER, notification)
    }
    
    /**
     * G·ª≠i c·∫£nh b√°o v·ªÅ xu h∆∞·ªõng huy·∫øt √°p
     */
    fun notifyBloodPressureTrend(trendType: TrendType, recentPredictions: List<BloodPressurePrediction>) {
        if (!hasNotificationPermission() || recentPredictions.isEmpty()) return
        
        val avgSystolic = recentPredictions.map { it.systolicBP }.average().toInt()
        val avgDiastolic = recentPredictions.map { it.diastolicBP }.average().toInt()
        
        val (title, message, priority) = when (trendType) {
            TrendType.INCREASING -> {
                Triple(
                    "üìà Xu h∆∞·ªõng huy·∫øt √°p tƒÉng",
                    "Huy·∫øt √°p trung b√¨nh trong 7 ng√†y qua: $avgSystolic/$avgDiastolic mmHg. C·∫ßn ch√∫ √Ω theo d√µi.",
                    NotificationCompat.PRIORITY_DEFAULT
                )
            }
            TrendType.DECREASING -> {
                Triple(
                    "üìâ Xu h∆∞·ªõng huy·∫øt √°p gi·∫£m",
                    "Huy·∫øt √°p trung b√¨nh trong 7 ng√†y qua: $avgSystolic/$avgDiastolic mmHg. Xu h∆∞·ªõng t√≠ch c·ª±c!",
                    NotificationCompat.PRIORITY_LOW
                )
            }
            TrendType.UNSTABLE -> {
                Triple(
                    "‚ö†Ô∏è Huy·∫øt √°p kh√¥ng ·ªïn ƒë·ªãnh",
                    "Huy·∫øt √°p bi·∫øn ƒë·ªông nhi·ªÅu trong th·ªùi gian g·∫ßn ƒë√¢y. N√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ©.",
                    NotificationCompat.PRIORITY_DEFAULT
                )
            }
        }
        
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("open_history", true)
        }
        
        val pendingIntent = PendingIntent.getActivity(
            context, 0, intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID_HEALTH_ALERTS)
            .setSmallIcon(R.drawable.ic_chart)
            .setContentTitle(title)
            .setContentText(message)
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText("$message\n\nD·ª±a tr√™n ${recentPredictions.size} l·∫ßn ƒëo g·∫ßn ƒë√¢y.\nXem bi·ªÉu ƒë·ªì ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ xu h∆∞·ªõng.")
            )
            .setPriority(priority)
            .setColor(ContextCompat.getColor(context, R.color.primary_color))
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setCategory(NotificationCompat.CATEGORY_STATUS)
            .build()
        
        NotificationManagerCompat.from(context).notify(NOTIFICATION_ID_TREND_ALERT, notification)
    }
    
    /**
     * H·ªßy t·∫•t c·∫£ notifications
     */
    fun cancelAllNotifications() {
        NotificationManagerCompat.from(context).cancelAll()
    }
    
    /**
     * H·ªßy emergency notification
     */
    fun cancelEmergencyNotification() {
        NotificationManagerCompat.from(context).cancel(NOTIFICATION_ID_EMERGENCY)
    }
    
    /**
     * Ki·ªÉm tra quy·ªÅn th√¥ng b√°o
     */
    private fun hasNotificationPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.POST_NOTIFICATIONS
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            NotificationManagerCompat.from(context).areNotificationsEnabled()
        }
    }
    
    enum class TrendType {
        INCREASING,
        DECREASING, 
        UNSTABLE
    }
    
    // Helper data class for multiple values
    private data class Tuple4<A, B, C, D>(
        val first: A,
        val second: B,
        val third: C,
        val fourth: D
    )
} 